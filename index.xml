<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>On avance</title>
    <link>https://znkaihuang.github.io/</link>
    <description>Recent content on On avance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Aug 2022 11:52:13 +0800</lastBuildDate><atom:link href="https://znkaihuang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>位元運算（一）</title>
      <link>https://znkaihuang.github.io/posts/bitwise_operation/%E4%BD%8D%E5%85%83%E9%81%8B%E7%AE%97%E4%B8%80/</link>
      <pubDate>Mon, 15 Aug 2022 11:52:13 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/bitwise_operation/%E4%BD%8D%E5%85%83%E9%81%8B%E7%AE%97%E4%B8%80/</guid>
      <description>位元運算是程式設計中對二進位數的操作，與一般加減及乘除運算相比，有運算速度更快、耗費資運更少的優勢，是優化程式非常有效的方式。
Java 提供位元運算子以及移位運算子：其中位元運算子包含 OR (|) 、AND (&amp;amp;) 、XOR（^）、NOT（~），移位運算子包含算術右移位運算子（&amp;gt;&amp;gt;&amp;gt;）、右移位運算子（&amp;gt;&amp;gt;）以及左移位運算子（&amp;lt;&amp;lt;）。
位元運算技巧 以下列出常見並且實用的位元運算，使用 1s 以及 0s 來表示全為 1 或是 0 的二進位序列：</description>
    </item>
    
    <item>
      <title>並行運算與平行運算差異</title>
      <link>https://znkaihuang.github.io/posts/parallel_computing/%E4%B8%A6%E8%A1%8C%E9%81%8B%E7%AE%97%E8%88%87%E5%B9%B3%E8%A1%8C%E9%81%8B%E7%AE%97%E5%B7%AE%E7%95%B0/</link>
      <pubDate>Mon, 04 Jul 2022 13:38:42 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/parallel_computing/%E4%B8%A6%E8%A1%8C%E9%81%8B%E7%AE%97%E8%88%87%E5%B9%B3%E8%A1%8C%E9%81%8B%E7%AE%97%E5%B7%AE%E7%95%B0/</guid>
      <description>並行運算 ( Concurrent computing ) 與平行運算 ( Parallel computing ) 名稱相似，但兩者意含不同。並行運算著重在系統允許多項任務在一定時間內同時進行；平行運算強調藉由分治 ( Divide and conquer) 提昇執行任務的效能。</description>
    </item>
    
    <item>
      <title>多道程式、多工處理、多執行緒以及多元處理差異</title>
      <link>https://znkaihuang.github.io/posts/parallel_computing/%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BC%8F%E5%A4%9A%E5%B7%A5%E8%99%95%E7%90%86%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92%E4%BB%A5%E5%8F%8A%E5%A4%9A%E5%85%83%E8%99%95%E7%90%86%E5%B7%AE%E7%95%B0/</link>
      <pubDate>Mon, 04 Jul 2022 12:32:18 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/parallel_computing/%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BC%8F%E5%A4%9A%E5%B7%A5%E8%99%95%E7%90%86%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92%E4%BB%A5%E5%8F%8A%E5%A4%9A%E5%85%83%E8%99%95%E7%90%86%E5%B7%AE%E7%95%B0/</guid>
      <description>多道程式 ( Multitasking )、多工處理 ( Multiprogramming )、多執行緒 ( Multithreading )以及多元處理 ( Multiprocessing ) 的名稱相近但意義不同，在此列出四者提供比對。</description>
    </item>
    
    <item>
      <title>Java 8 - Base64 Encode and Decode</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-base64_encode_decode/</link>
      <pubDate>Wed, 22 Jun 2022 10:43:12 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-base64_encode_decode/</guid>
      <description>Base64 是一種以二進位制進行編碼的的表示方式。 Base64 以六個位元表示 64 個字元，包含 26 個拉丁字母大小寫、數字 0-9 以及兩個根據不同作業系統而不同的字元，編碼表格可以參考以下的兩個表格，第一個表格為 Base64 編碼表，第二個表格為 URL and Filename safe 的 Base64 編碼表，兩者的差異在於最後的兩個編碼字元。</description>
    </item>
    
    <item>
      <title>Java 8 - Parallel Array Sorting</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-parallel_array_sorting/</link>
      <pubDate>Tue, 07 Jun 2022 14:42:45 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-parallel_array_sorting/</guid>
      <description>Java 早在 1.2 引進了 Arrays 類別，作為提供 Array manipulating 的類別， Arrays 裡的每個 method 都是 static method ，因此不需要對 Arrays 類別進行初始化就可以直接使用。</description>
    </item>
    
    <item>
      <title>Java 8 - Locale API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-locale_api/</link>
      <pubDate>Sun, 29 May 2022 11:06:37 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-locale_api/</guid>
      <description>開發國際化應用程式需要考慮程式運行的所在區域以及所在區域使用的語言， 在原生的 JDK 中有個類別，產生的物件會紀錄語言以及區域的資訊，這個類別就是 Locale 。有了 Locale 這個分辨語言、區域的類別，就可以根據不同的 Locale 讓程式有不同的行為。</description>
    </item>
    
    <item>
      <title>Java 8 - Calendar API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-calendar_api/</link>
      <pubDate>Mon, 23 May 2022 08:50:54 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-calendar_api/</guid>
      <description>開發應用程式時，如果應用程式必須支援多種語言或是應用程式會被散播到多個國家執行，在開發的過程中應用程式就必須考慮 internationlization (註1) 。
一般而言，不同的地區與文化，除了使用的語言符號不同之外，還存在其他各種差異，例如：聲音、日期、時間、度量衡單位等，如果開發國際化應用程式就必須考量這些差異因素， Oracle 的 internationlization 上有列出一份 checklist 可以提供參考。</description>
    </item>
    
    <item>
      <title>Java 8 - Stream API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-stream_api/</link>
      <pubDate>Fri, 06 May 2022 09:46:47 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-stream_api/</guid>
      <description>自 Java 8 引入 Stream API 後， 為 Java 開發人員提供宣告式( Declarative )的方式來處理資料。</description>
    </item>
    
    <item>
      <title>Java 8 - Functional Interface &amp; Method Reference</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-functional_interface/</link>
      <pubDate>Fri, 29 Apr 2022 09:12:17 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-functional_interface/</guid>
      <description>在前一篇 Java 8 - Lambda Expression 提到， Labmda Expression 可以讓開發者 用更簡潔的語法撰寫原有 Anonymous Class 有的功能，然而前提是 Anonymous Class 所 implements 的 interface 必須只包 含單一 Method 。這類 interface 就是所謂 functional interface 。</description>
    </item>
    
    <item>
      <title>Java 8 - Lambda Expression</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-lambda_expression/</link>
      <pubDate>Thu, 21 Apr 2022 18:44:46 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-lambda_expression/</guid>
      <description>Lambda Expression (Lambda 表達式) 的出現使的開發人員能夠用更簡潔的語法達到 Anonymous Classes (匿名類別) 所能達到的功能，前提是原有寫法的 Anonymous Class 裡只有單一 method。</description>
    </item>
    
    <item>
      <title>Java 8 新增特性</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C/</link>
      <pubDate>Thu, 21 Apr 2022 18:09:01 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C/</guid>
      <description>Java SE 8 於 2014年初釋出，至今已過數年，時至今日， Oracle JDK 8 仍在 更新，在我寫這篇文章時， JDK8 發行最新的更新版本為 JDK 8u331 。 Java SE 8 導入的 Lambda 表述式、Stream API、Calendar Locale APIs 等等許多新功能，為 Java 開發人員提供更便捷、有效率的開發工具。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://znkaihuang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://znkaihuang.github.io/about/</guid>
      <description>我是一名軟體開發者，主要使用Java進行開發
我喜歡學習，除了程式技術之外，同時也在學習法文，並且對這個世界充滿好奇
偶爾會突發奇想，將想法做成專案，可以到我的github看看
如果你也充滿想法，歡迎寄信給我，我喜歡各式各樣稀奇古怪的想法！
聯絡我： zkhuang@protonmail.com</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://znkaihuang.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://znkaihuang.github.io/contact/</guid>
      <description>如果對我的分享感興趣或是想提供您的建議，歡迎寄信聯絡我，謝謝！
Your Name Email Address An email address is required.  Message   </description>
    </item>
    
  </channel>
</rss>

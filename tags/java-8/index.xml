<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java 8 on On avance</title>
    <link>https://znkaihuang.github.io/tags/java-8/</link>
    <description>Recent content in Java 8 on On avance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2022 11:06:37 +0800</lastBuildDate><atom:link href="https://znkaihuang.github.io/tags/java-8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 8 - Locale API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-locale_api/</link>
      <pubDate>Sun, 29 May 2022 11:06:37 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-locale_api/</guid>
      <description>開發國際化應用程式需要考慮程式運行的所在區域以及所在區域使用的語言， 在原生的 JDK 中有個類別，產生的物件會紀錄語言以及區域的資訊，這個類別就是 Locale 。有了 Locale 這個分辨語言、區域的類別，就可以根據不同的 Locale 讓程式有不同的行為。</description>
    </item>
    
    <item>
      <title>Java 8 - Calendar API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-calendar_api/</link>
      <pubDate>Mon, 23 May 2022 08:50:54 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-calendar_api/</guid>
      <description>開發應用程式時，如果應用程式必須支援多種語言或是應用程式會被散播到多個國家執行，在開發的過程中應用程式就必須考慮 internationlization (註1) 。
一般而言，不同的地區與文化，除了使用的語言符號不同之外，還存在其他各種差異，例如：聲音、日期、時間、度量衡單位等，如果開發國際化應用程式就必須考量這些差異因素， Oracle 的 internationlization 上有列出一份 checklist 可以提供參考。</description>
    </item>
    
    <item>
      <title>Java 8 - Stream API</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-stream_api/</link>
      <pubDate>Fri, 06 May 2022 09:46:47 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-stream_api/</guid>
      <description>自 Java 8 引入 Stream API 後， 為 Java 開發人員提供宣告式( Declarative )的方式來處理資料。</description>
    </item>
    
    <item>
      <title>Java 8 - Functional Interface &amp; Method Reference</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-functional_interface/</link>
      <pubDate>Fri, 29 Apr 2022 09:12:17 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-functional_interface/</guid>
      <description>在前一篇 Java 8 - Lambda Expression 提到， Labmda Expression 可以讓開發者 用更簡潔的語法撰寫原有 Anonymous Class 有的功能，然而前提是 Anonymous Class 所 implements 的 interface 必須只包 含單一 Method 。這類 interface 就是所謂 functional interface 。</description>
    </item>
    
    <item>
      <title>Java 8 - Lambda Expression</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-lambda_expression/</link>
      <pubDate>Thu, 21 Apr 2022 18:44:46 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C-lambda_expression/</guid>
      <description>Lambda Expression (Lambda 表達式) 的出現使的開發人員能夠用更簡潔的語法達到 Anonymous Classes (匿名類別) 所能達到的功能，前提是原有寫法的 Anonymous Class 裡只有單一 method。</description>
    </item>
    
    <item>
      <title>Java 8 新增特性</title>
      <link>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C/</link>
      <pubDate>Thu, 21 Apr 2022 18:09:01 +0800</pubDate>
      
      <guid>https://znkaihuang.github.io/posts/java/java8%E7%B3%BB%E5%88%97%E4%B8%BB%E9%A1%8C/</guid>
      <description>Java SE 8 於 2014年初釋出，至今已過數年，時至今日， Oracle JDK 8 仍在 更新，在我寫這篇文章時， JDK8 發行最新的更新版本為 JDK 8u331 。 Java SE 8 導入的 Lambda 表述式、Stream API、Calendar Locale APIs 等等許多新功能，為 Java 開發人員提供更便捷、有效率的開發工具。</description>
    </item>
    
  </channel>
</rss>
